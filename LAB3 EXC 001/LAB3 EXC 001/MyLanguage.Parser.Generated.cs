// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  C4-036
// DateTime: 2019/5/11 上午 10:11:17
// UserName: C4
// Input file <MyLanguage.Language.grammar.y - 2019/5/11 上午 10:11:16>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace LAB3_EXC_001
{
internal enum Token {error=2,EOF=3,INTEGER=4,FLOAT=5,OP_PLUS=6,
    OP_SUB=7,OP_MUL=8,OP_DIV=9,OP_EQUAL=10,LEFT_SMALL=11,RIGHT_SMALL=12,
    COMMA=13,SEMICMMA=14,EXP_FUNC=15,TYPE_DOUBLE=16,VARIABLE=17};

internal partial struct ValueType
{ 
			public int n; 
			public double d;
			public string s; 
			
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class MyLanguageParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from MyLanguage.Language.grammar.y - 2019/5/11 上午 10:11:16
	Dictionary<string, double>var_table = new Dictionary<string, double>();
  // End verbatim content from MyLanguage.Language.grammar.y - 2019/5/11 上午 10:11:16

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[21];
  private static State[] states = new State[38];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "declare", "var_type", "var_list", "var_init", "expression", 
      "term", "factor", "number", };

  static MyLanguageParser() {
    states[0] = new State(new int[]{16,37},new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{17,10},new int[]{-5,5,-6,7});
    states[5] = new State(new int[]{14,6});
    states[6] = new State(-3);
    states[7] = new State(new int[]{13,8,14,-5});
    states[8] = new State(new int[]{17,10},new int[]{-5,9,-6,7});
    states[9] = new State(-6);
    states[10] = new State(new int[]{10,11,13,-7,14,-7});
    states[11] = new State(new int[]{4,18,5,19,7,20,15,22,11,32},new int[]{-7,12,-8,35,-9,36,-10,17});
    states[12] = new State(new int[]{6,13,7,28,13,-8,14,-8});
    states[13] = new State(new int[]{4,18,5,19,7,20,15,22,11,32},new int[]{-8,14,-9,36,-10,17});
    states[14] = new State(new int[]{8,15,9,30,6,-10,7,-10,13,-10,14,-10,12,-10});
    states[15] = new State(new int[]{4,18,5,19,7,20,15,22,11,32},new int[]{-9,16,-10,17});
    states[16] = new State(-13);
    states[17] = new State(-15);
    states[18] = new State(-19);
    states[19] = new State(-20);
    states[20] = new State(new int[]{4,18,5,19},new int[]{-10,21});
    states[21] = new State(-16);
    states[22] = new State(new int[]{11,23});
    states[23] = new State(new int[]{4,18,5,19,7,20,15,22,11,32},new int[]{-7,24,-8,35,-9,36,-10,17});
    states[24] = new State(new int[]{13,25,6,13,7,28});
    states[25] = new State(new int[]{4,18,5,19,7,20,15,22,11,32},new int[]{-7,26,-8,35,-9,36,-10,17});
    states[26] = new State(new int[]{12,27,6,13,7,28});
    states[27] = new State(-17);
    states[28] = new State(new int[]{4,18,5,19,7,20,15,22,11,32},new int[]{-8,29,-9,36,-10,17});
    states[29] = new State(new int[]{8,15,9,30,6,-11,7,-11,13,-11,14,-11,12,-11});
    states[30] = new State(new int[]{4,18,5,19,7,20,15,22,11,32},new int[]{-9,31,-10,17});
    states[31] = new State(-14);
    states[32] = new State(new int[]{4,18,5,19,7,20,15,22,11,32},new int[]{-7,33,-8,35,-9,36,-10,17});
    states[33] = new State(new int[]{12,34,6,13,7,28});
    states[34] = new State(-18);
    states[35] = new State(new int[]{8,15,9,30,6,-9,7,-9,13,-9,14,-9,12,-9});
    states[36] = new State(-12);
    states[37] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4,-5,14});
    rules[4] = new Rule(-4, new int[]{16});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-6,13,-5});
    rules[7] = new Rule(-6, new int[]{17});
    rules[8] = new Rule(-6, new int[]{17,10,-7});
    rules[9] = new Rule(-7, new int[]{-8});
    rules[10] = new Rule(-7, new int[]{-7,6,-8});
    rules[11] = new Rule(-7, new int[]{-7,7,-8});
    rules[12] = new Rule(-8, new int[]{-9});
    rules[13] = new Rule(-8, new int[]{-8,8,-9});
    rules[14] = new Rule(-8, new int[]{-8,9,-9});
    rules[15] = new Rule(-9, new int[]{-10});
    rules[16] = new Rule(-9, new int[]{7,-10});
    rules[17] = new Rule(-9, new int[]{15,11,-7,13,-7,12});
    rules[18] = new Rule(-9, new int[]{11,-7,12});
    rules[19] = new Rule(-10, new int[]{4});
    rules[20] = new Rule(-10, new int[]{5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> declare
{
			foreach(KeyValuePair<string, double> v in var_table)
			{
				Console.Write("{0} = {1}\n", v.Key, v.Value);
			}
		}
        break;
      case 7: // var_init -> VARIABLE
{var_table.Add(ValueStack[ValueStack.Depth-1].s, 0);}
        break;
      case 8: // var_init -> VARIABLE, OP_EQUAL, expression
{var_table.Add(ValueStack[ValueStack.Depth-3].s, ValueStack[ValueStack.Depth-1].d);}
        break;
      case 9: // expression -> term
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-1].d;}
        break;
      case 10: // expression -> expression, OP_PLUS, term
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-3].d+ValueStack[ValueStack.Depth-1].d;}
        break;
      case 11: // expression -> expression, OP_SUB, term
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-3].d-ValueStack[ValueStack.Depth-1].d;}
        break;
      case 12: // term -> factor
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-1].d;}
        break;
      case 13: // term -> term, OP_MUL, factor
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-3].d*ValueStack[ValueStack.Depth-1].d;}
        break;
      case 14: // term -> term, OP_DIV, factor
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-3].d/ValueStack[ValueStack.Depth-1].d;}
        break;
      case 15: // factor -> number
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-1].d;}
        break;
      case 16: // factor -> OP_SUB, number
{CurrentSemanticValue.d=-ValueStack[ValueStack.Depth-1].d;}
        break;
      case 17: // factor -> EXP_FUNC, LEFT_SMALL, expression, COMMA, expression, RIGHT_SMALL
{CurrentSemanticValue.d=Math.Pow(ValueStack[ValueStack.Depth-4].d, ValueStack[ValueStack.Depth-2].d);}
        break;
      case 18: // factor -> LEFT_SMALL, expression, RIGHT_SMALL
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-2].d;}
        break;
      case 19: // number -> INTEGER
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-1].n;}
        break;
      case 20: // number -> FLOAT
{CurrentSemanticValue.d=ValueStack[ValueStack.Depth-1].d;}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
